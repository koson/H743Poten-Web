"""
AI Dashboard Routes for H743Poten-Web
Migrated from PyPiPo Working-AI-Dashboard-V1
"""

from flask import Blueprint, render_template, jsonify, request
import sys
import os
from pathlib import Path
import numpy as np

# Add current directory to path for imports
current_dir = Path(__file__).parent.parent
sys.path.insert(0, str(current_dir))

try:
    from ai.ml_models.electrochemical_intelligence import ElectrochemicalIntelligence
    from ai.ml_models.peak_classifier import PeakClassifier
    from ai.ml_models.concentration_predictor import ConcentrationPredictor
    from ai.ml_models.signal_processor import SignalProcessor
except ImportError as e:
    print(f"Warning: AI modules not available: {e}")
    import numpy as np
    
    # Create mock classes for development with more realistic data
    class ElectrochemicalIntelligence:
        def analyze_cv_data(self, data):
            voltage = np.array(data['voltage'])
            current = np.array(data['current'])
            # Generate mock peaks
            peaks = [
                {'voltage': 0.25, 'current': 2.1, 'width': 0.12, 'type': 'oxidation'},
                {'voltage': -0.15, 'current': -1.8, 'width': 0.15, 'type': 'reduction'}
            ]
            return {
                'voltage': voltage.tolist(),
                'current': current.tolist(),
                'peaks': peaks,
                'analysis': {
                    'num_peaks': len(peaks),
                    'reversibility': 0.92,
                    'peak_separation': 0.4
                }
            }
    
    class PeakClassifier:
        def classify_peaks(self, peaks):
            return {
                'classification': [
                    {'type': 'oxidation', 'confidence': 0.95},
                    {'type': 'reduction', 'confidence': 0.88}
                ],
                'accuracy': 0.958
            }
    
    class ConcentrationPredictor:
        def predict_concentration(self, data):
            return {
                'concentration': 47.3,
                'unit': 'Î¼M',
                'confidence_interval': {
                    'lower': 45.2,
                    'upper': 49.4
                },
                'r_squared': 0.994
            }
    
    class SignalProcessor:
        def enhance_signal(self, signal):
            signal = np.array(signal)
            # Mock signal processing
            return {
                'enhanced_signal': signal.tolist(),
                'noise_reduction': 15.2,
                'baseline_stability': 0.992,
                'signal_quality': 92
            }

# Create Blueprint
ai_bp = Blueprint('ai', __name__, url_prefix='/ai')

# Initialize AI modules
try:
    electrochemical_ai = ElectrochemicalIntelligence()
    peak_classifier = PeakClassifier()
    concentration_predictor = ConcentrationPredictor()
    signal_processor = SignalProcessor()
except Exception as e:
    print(f"Warning: Failed to initialize AI modules: {e}")
    # Use mock instances
    electrochemical_ai = ElectrochemicalIntelligence()
    peak_classifier = PeakClassifier()
    concentration_predictor = ConcentrationPredictor()
    signal_processor = SignalProcessor()

@ai_bp.route('/')
@ai_bp.route('/dashboard')
def ai_dashboard():
    """Main AI Dashboard page"""
    return render_template('ai_dashboard.html')

@ai_bp.route('/api/analyze', methods=['POST'])
def analyze_data():
    """Analyze electrochemical data using AI"""
    try:
        print("Received analyze request")  # Debug log
        data = request.get_json()
        print(f"Request data type: {type(data)}")  # Debug log type
        print(f"Request data: {data}")  # Debug log data
        print(f"Request headers: {request.headers}")  # Debug log headers
        
        if not data:
            print("No data received")  # Debug log
            return jsonify({
                'success': False,
                'error': 'No data provided'
            }), 400
        
        if 'voltage' not in data or 'current' not in data:
            print(f"Missing required fields. Got: {list(data.keys())}")  # Debug log
            return jsonify({
                'success': False,
                'error': 'Invalid data format. Expected voltage and current arrays.'
            }), 400
        
        print("Performing AI analysis")  # Debug log
        # Return mock data for development
        mock_result = {
            'voltage': data['voltage'],
            'current': data['current'],
            'peaks': [
                {'voltage': 0.25, 'current': 2.1, 'width': 0.12, 'type': 'oxidation'},
                {'voltage': -0.15, 'current': -1.8, 'width': 0.15, 'type': 'reduction'}
            ],
            'analysis': {
                'num_peaks': 2,
                'reversibility': 0.92,
                'peak_separation': 0.4
            }
        }
        
        print("Analysis complete")  # Debug log
        return jsonify({
            'success': True,
            'analysis': mock_result
        })
        
    except Exception as e:
        import traceback
        print(f"Error in analyze_data: {str(e)}")  # Debug log
        print(traceback.format_exc())  # Print full traceback
        return jsonify({
            'success': False,
            'error': f'Analysis failed: {str(e)}'
        }), 500

@ai_bp.route('/api/classify-peaks', methods=['POST'])
def classify_peaks():
    """Classify peaks in electrochemical data"""
    try:
        data = request.get_json()
        
        if not data or 'peaks' not in data:
            return jsonify({
                'success': False,
                'error': 'Invalid data format. Expected peaks array.'
            }), 400
        
        # Classify peaks
        classification = peak_classifier.classify_peaks(data['peaks'])
        
        return jsonify({
            'success': True,
            'classification': classification
        })
        
    except Exception as e:
        return jsonify({
            'success': False,
            'error': f'Peak classification failed: {str(e)}'
        }), 500

@ai_bp.route('/api/predict-concentration', methods=['POST'])
def predict_concentration():
    """Predict analyte concentration"""
    try:
        data = request.get_json()
        print(f"Received request in predict_concentration:")
        print(f"Request data type: {type(data)}")
        print(f"Request data: {data}")
        print(f"Request headers: {request.headers}")
        
        if not data or 'voltage' not in data or 'current' not in data:
            return jsonify({
                'success': False,
                'error': 'Invalid data format. Expected voltage and current arrays.'
            }), 400
        
        # Calculate mean current value
        print("Calling concentration predictor...")
        current_array = np.array(data['current'])
        mean_current = np.mean(current_array)
        
        concentration = concentration_predictor.predict_concentration(mean_current)
        print(f"Concentration predictor result: {concentration}")
        
        return jsonify({
            'success': True,
            'concentration': concentration
        })
        
    except Exception as e:
        import traceback
        print(f"Error in predict_concentration: {str(e)}")
        print(traceback.format_exc())
        return jsonify({
            'success': False,
            'error': f'Concentration prediction failed: {str(e)}'
        }), 500

@ai_bp.route('/api/enhance-signal', methods=['POST'])
def enhance_signal():
    """Enhance signal quality using AI"""
    try:
        data = request.get_json()
        print(f"Received request in enhance_signal:")
        print(f"Request data type: {type(data)}")
        print(f"Request data: {data}")
        print(f"Request headers: {request.headers}")
        
        if not data or 'voltage' not in data or 'current' not in data:
            return jsonify({
                'success': False,
                'error': 'Invalid data format. Expected voltage and current arrays.'
            }), 400
            
        # Convert to numpy arrays
        voltage = np.array(data['voltage']) 
        current = np.array(data['current'])
        
        # Apply filtering and baseline correction
        print("Applying signal filtering...")
        filtered_signal = signal_processor.apply_filtering(voltage, current)
        print("Applying baseline correction...")
        corrected_current = signal_processor.correct_baseline(voltage, filtered_signal.filtered_data)
        
        # Get signal quality assessment
        print("Assessing signal quality...")
        quality = signal_processor.assess_signal_quality(voltage, corrected_current)
        
        enhanced_result = {
            'voltage': voltage.tolist(),
            'current': corrected_current.tolist(),
            'quality': {
                'snr_db': quality.snr_db,
                'baseline_drift': quality.baseline_drift,
                'noise_level': quality.noise_level,
                'quality_score': quality.quality_score,
                'recommendations': quality.recommendations
            },
            'filter_info': {
                'method': filtered_signal.filter_method,
                'quality_improvement': filtered_signal.quality_improvement
            }
        }
        
        print(f"Signal enhancement complete. Result: {enhanced_result}")
        
        return jsonify({
            'success': True,
            'enhanced_signal': enhanced_result
        })
        
    except Exception as e:
        import traceback
        print(f"Error in enhance_signal: {str(e)}")
        print(traceback.format_exc())
        return jsonify({
            'success': False,
            'error': f'Signal enhancement failed: {str(e)}'
        }), 500

@ai_bp.route('/api/status')
def ai_status():
    """Get AI system status"""
    try:
        status = {
            'ai_modules_loaded': True,
            'electrochemical_ai': 'available',
            'peak_classifier': 'available',
            'concentration_predictor': 'available',
            'signal_processor': 'available',
            'version': '2.0.0',
            'last_updated': '2025-08-14'
        }
        
        return jsonify({
            'success': True,
            'status': status
        })
        
    except Exception as e:
        return jsonify({
            'success': False,
            'error': f'Status check failed: {str(e)}'
        }), 500
