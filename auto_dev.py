#!/usr/bin/env python3
"""
Auto-detect ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ terminal manager ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
"""

import os
import sys
import platform
import subprocess

def is_wsl():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô WSL ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
    try:
        with open('/proc/version', 'r') as f:
            return 'microsoft' in f.read().lower()
    except:
        return False

def get_manager_command():
    """‡∏´‡∏≤‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á terminal manager ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°"""
    system = platform.system()
    
    if system == "Windows":
        return ["python", "terminal_manager.py"]
    elif system == "Linux":
        if is_wsl():
            return ["python3", "universal_terminal_manager.py"]
        else:
            return ["python3", "universal_terminal_manager.py"]
    else:
        return ["python3", "universal_terminal_manager.py"]

def main():
    """‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£"""
    
    if len(sys.argv) < 2:
        print("üîß H743Poten Smart Terminal Manager")
        print("‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ manager ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°")
        print("")
        
        system = platform.system()
        wsl_status = " (WSL)" if is_wsl() else ""
        print(f"‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {system}{wsl_status}")
        
        manager_cmd = get_manager_command()
        print(f"Manager ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ: {' '.join(manager_cmd)}")
        print("")
        print("‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ:")
        print("  python auto_dev.py start   - ‡πÄ‡∏£‡∏¥‡πà‡∏° server")
        print("  python auto_dev.py stop    - ‡∏´‡∏¢‡∏∏‡∏î server")
        print("  python auto_dev.py status  - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞")
        print("  python auto_dev.py logs    - ‡πÅ‡∏™‡∏î‡∏á logs")
        return
    
    # ‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏î‡πâ‡∏ß‡∏¢ manager ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
    manager_cmd = get_manager_command()
    manager_cmd.extend(sys.argv[1:])  # ‡πÄ‡∏û‡∏¥‡πà‡∏° arguments
    
    try:
        subprocess.run(manager_cmd, check=True)
    except subprocess.CalledProcessError as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        sys.exit(1)
    except FileNotFoundError:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå manager: {' '.join(manager_cmd)}")
        sys.exit(1)

if __name__ == "__main__":
    main()
