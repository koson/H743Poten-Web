#!/usr/bin/env python3
"""
Test Problematic Files - ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö peak ‡πÅ‡∏•‡∏∞ baseline
‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏ö‡∏°‡∏≤:

1. Pipot_Ferro_0_5mM_100mVpS_E1_scan_08.csv - baseline segment ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å (‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ä‡πà‡∏ß‡∏á‡∏¢‡∏≤‡∏ß)
2. Pipot_Ferro_0_5mM_200mVpS_E5_scan_05.csv - ‡∏°‡∏µ OX 2 ‡∏≠‡∏±‡∏ô ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ RED, OX ‡∏ó‡∏µ‡πà +0.7V ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å
3. Pipot_Ferro_0_5mM_20mVpS_E1_scan_02.csv - ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ peak ‡πÅ‡∏•‡∏∞ baseline ‡πÄ‡∏•‡∏¢
4. Pipot_Ferro_0_5mM_20mVpS_E2_scan_04.csv - ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ segment ‡πÉ‡∏ä‡πâ baseline ‡πÄ‡∏õ‡πá‡∏ô‡∏®‡∏π‡∏ô‡∏¢‡πå
5. Pipot_Ferro_0_5mM_400mVpS_E5_scan_06.csv - baseline segment ‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô peak
"""

import os
import sys
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from pathlib import Path
import json
import time

# Add the src directory to the path
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

# Import local modules
try:
    from src.routes.baseline_detector_v4 import cv_baseline_detector_v4
    from src.routes.peak_detection import detect_peaks_prominence, validate_peak_pre_detection
    from enhanced_peak_detector import EnhancedPeakDetector
    print("‚úÖ Local modules imported successfully")
except ImportError as e:
    print(f"‚ùå Import error: {e}")
    print("Trying alternative imports...")
    try:
        from baseline_detector_v4 import cv_baseline_detector_v4
        from peak_detection import detect_peaks_prominence, validate_peak_pre_detection
        print("‚úÖ Alternative imports successful")
    except ImportError as e2:
        print(f"‚ùå All imports failed: {e2}")
        sys.exit(1)

class ProblemFileAnalyzer:
    """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö"""
    
    def __init__(self):
        self.base_path = Path("Test_data/Stm32/Pipot_Ferro_0_5mM")
        self.problem_files = [
            {
                'file': 'Pipot_Ferro_0_5mM_100mVpS_E1_scan_08.csv',
                'issue': 'baseline segment ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å (‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ä‡πà‡∏ß‡∏á‡∏¢‡∏≤‡∏ß)',
                'expected': '‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ baseline segment ‡∏ó‡∏µ‡πà‡∏¢‡∏≤‡∏ß‡∏Å‡∏ß‡πà‡∏≤'
            },
            {
                'file': 'Pipot_Ferro_0_5mM_200mVpS_E5_scan_05.csv', 
                'issue': '‡∏°‡∏µ OX 2 ‡∏≠‡∏±‡∏ô ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ RED, OX ‡∏ó‡∏µ‡πà +0.7V ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å',
                'expected': '‡∏Ñ‡∏ß‡∏£‡πÄ‡∏à‡∏≠ RED peak ‡πÅ‡∏•‡∏∞ OX ‡∏ó‡∏µ‡πà +0.7V ‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡∏ñ‡∏π‡∏Å‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö'
            },
            {
                'file': 'Pipot_Ferro_0_5mM_20mVpS_E1_scan_02.csv',
                'issue': '‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ peak ‡πÅ‡∏•‡∏∞ baseline ‡πÄ‡∏•‡∏¢',
                'expected': '‡∏Ñ‡∏ß‡∏£‡πÄ‡∏à‡∏≠ peak ‡πÅ‡∏•‡∏∞ baseline ‡πÅ‡∏°‡πâ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏≠‡πà‡∏≠‡∏ô'
            },
            {
                'file': 'Pipot_Ferro_0_5mM_20mVpS_E2_scan_04.csv',
                'issue': '‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ segment ‡πÉ‡∏ä‡πâ baseline ‡πÄ‡∏õ‡πá‡∏ô‡∏®‡∏π‡∏ô‡∏¢‡πå',
                'expected': '‡∏Ñ‡∏ß‡∏£‡πÄ‡∏à‡∏≠ baseline segment ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'
            },
            {
                'file': 'Pipot_Ferro_0_5mM_400mVpS_E5_scan_06.csv',
                'issue': 'baseline segment ‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô peak',
                'expected': 'baseline ‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡∏ó‡∏±‡∏ö‡∏Å‡∏±‡∏ö peak'
            }
        ]
        
        self.results = []
        
    def load_csv_data(self, filepath):
        """‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå CSV"""
        try:
            if not os.path.exists(filepath):
                print(f"‚ùå File not found: {filepath}")
                return None, None
                
            df = pd.read_csv(filepath)
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
            voltage_col = None
            current_col = None
            
            for col in df.columns:
                col_lower = col.lower()
                if 'volt' in col_lower or 'potential' in col_lower or col_lower == 'v':
                    voltage_col = col
                elif 'current' in col_lower or 'amp' in col_lower or col_lower == 'i':
                    current_col = col
            
            if voltage_col is None or current_col is None:
                print(f"‚ùå Could not find voltage/current columns in {filepath}")
                print(f"Available columns: {list(df.columns)}")
                return None, None
                
            voltage = df[voltage_col].values
            current = df[current_col].values
            
            # ‡πÅ‡∏õ‡∏•‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
            if np.abs(current).max() < 1e-3:  # ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢ A ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô ¬µA
                current = current * 1e6
                print(f"üìä Converted current from A to ¬µA")
            
            print(f"üìà Data loaded: {len(voltage)} points")
            print(f"   Voltage range: {voltage.min():.3f} to {voltage.max():.3f} V")
            print(f"   Current range: {current.min():.3f} to {current.max():.3f} ¬µA")
            
            return voltage, current
            
        except Exception as e:
            print(f"‚ùå Error loading {filepath}: {e}")
            return None, None
    
    def analyze_baseline_detection(self, voltage, current, filename):
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö baseline"""
        print(f"\nüîç Analyzing baseline detection for: {filename}")
        
        baseline_results = {}
        
        # Method 1: Voltage Window Detector V4
        try:
            print("   Testing cv_baseline_detector_v4...")
            baseline_forward, baseline_reverse, segment_info = cv_baseline_detector_v4(
                voltage, current, []  # ‡πÑ‡∏°‡πà‡∏°‡∏µ peak regions
            )
            
            if baseline_forward is not None and baseline_reverse is not None:
                baseline_results['v4'] = {
                    'success': True,
                    'forward_len': len(baseline_forward),
                    'reverse_len': len(baseline_reverse),
                    'forward_range': (baseline_forward.min(), baseline_forward.max()),
                    'reverse_range': (baseline_reverse.min(), baseline_reverse.max()),
                    'segment_info': segment_info
                }
                print(f"   ‚úÖ V4 Success: forward={len(baseline_forward)}, reverse={len(baseline_reverse)}")
            else:
                baseline_results['v4'] = {'success': False, 'error': 'No baseline detected'}
                print(f"   ‚ùå V4 Failed: No baseline detected")
                
        except Exception as e:
            baseline_results['v4'] = {'success': False, 'error': str(e)}
            print(f"   ‚ùå V4 Error: {e}")
        
        return baseline_results
    
    def analyze_peak_detection(self, voltage, current, filename):
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö peak"""
        print(f"\nüéØ Analyzing peak detection for: {filename}")
        
        peak_results = {}
        
        # Method 1: Prominence Method
        try:
            print("   Testing prominence method...")
            result = detect_peaks_prominence(voltage, current)
            
            if result and 'peaks' in result:
                peaks = result['peaks']
                ox_peaks = [p for p in peaks if p.get('type') == 'oxidation']
                red_peaks = [p for p in peaks if p.get('type') == 'reduction']
                
                peak_results['prominence'] = {
                    'success': True,
                    'total_peaks': len(peaks),
                    'ox_peaks': len(ox_peaks),
                    'red_peaks': len(red_peaks),
                    'peaks': peaks,
                    'baseline_info': result.get('baseline_info', {})
                }
                
                print(f"   ‚úÖ Prominence Success: {len(peaks)} peaks (OX:{len(ox_peaks)}, RED:{len(red_peaks)})")
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î peaks
                for i, peak in enumerate(peaks):
                    print(f"      Peak {i+1}: {peak['type'][:3].upper()} at {peak['voltage']:.3f}V, {peak['current']:.1f}¬µA")
                    
            else:
                peak_results['prominence'] = {'success': False, 'error': 'No peaks detected'}
                print(f"   ‚ùå Prominence Failed: No peaks detected")
                
        except Exception as e:
            peak_results['prominence'] = {'success': False, 'error': str(e)}
            print(f"   ‚ùå Prominence Error: {e}")
        
        # Method 2: Enhanced Detector
        try:
            print("   Testing enhanced detector...")
            detector = EnhancedPeakDetector()
            
            # ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ baseline ‡∏Å‡πà‡∏≠‡∏ô
            baseline_forward, baseline_reverse, _ = cv_baseline_detector_v4(voltage, current, [])
            
            if baseline_forward is not None and baseline_reverse is not None:
                peaks = detector.detect_peaks_enhanced(voltage, current, baseline_forward, baseline_reverse)
                
                ox_peaks = [p for p in peaks if p.get('type') == 'oxidation']
                red_peaks = [p for p in peaks if p.get('type') == 'reduction']
                
                peak_results['enhanced'] = {
                    'success': True,
                    'total_peaks': len(peaks),
                    'ox_peaks': len(ox_peaks),
                    'red_peaks': len(red_peaks),
                    'peaks': peaks
                }
                
                print(f"   ‚úÖ Enhanced Success: {len(peaks)} peaks (OX:{len(ox_peaks)}, RED:{len(red_peaks)})")
            else:
                peak_results['enhanced'] = {'success': False, 'error': 'No baseline for enhanced detection'}
                print(f"   ‚ùå Enhanced Failed: No baseline")
                
        except Exception as e:
            peak_results['enhanced'] = {'success': False, 'error': str(e)}
            print(f"   ‚ùå Enhanced Error: {e}")
        
        return peak_results
    
    def create_diagnostic_plot(self, voltage, current, baseline_results, peak_results, filename, issue):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢‡∏õ‡∏±‡∏ç‡∏´‡∏≤"""
        
        fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 10))
        
        # Plot 1: ‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á
        ax1.plot(voltage, current, 'b-', linewidth=1, label='CV Data', alpha=0.7)
        
        # ‡πÅ‡∏™‡∏î‡∏á baseline ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        if baseline_results.get('v4', {}).get('success'):
            baseline_forward = baseline_results['v4'].get('baseline_forward')
            baseline_reverse = baseline_results['v4'].get('baseline_reverse')
            
            if baseline_forward is not None and baseline_reverse is not None:
                n_forward = len(baseline_forward)
                n_reverse = len(baseline_reverse)
                
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á voltage array ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö baseline
                voltage_forward = voltage[:n_forward] if len(voltage) >= n_forward else voltage
                voltage_reverse = voltage[n_forward:n_forward+n_reverse] if len(voltage) >= n_forward+n_reverse else voltage[n_forward:]
                
                if len(voltage_forward) == len(baseline_forward):
                    ax1.plot(voltage_forward, baseline_forward, 'r--', linewidth=2, label='Forward Baseline')
                if len(voltage_reverse) == len(baseline_reverse):
                    ax1.plot(voltage_reverse, baseline_reverse, 'g--', linewidth=2, label='Reverse Baseline')
        
        # ‡πÅ‡∏™‡∏î‡∏á peaks ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        for method in ['prominence', 'enhanced']:
            if peak_results.get(method, {}).get('success'):
                peaks = peak_results[method]['peaks']
                for peak in peaks:
                    marker = '*' if peak['type'] == 'oxidation' else 'v'
                    color = 'red' if peak['type'] == 'oxidation' else 'green'
                    ax1.plot(peak['voltage'], peak['current'], marker, markersize=10, 
                            color=color, label=f"{method.title()} {peak['type'][:3].upper()}")
        
        ax1.set_xlabel('Voltage (V)')
        ax1.set_ylabel('Current (¬µA)')
        ax1.set_title(f'Diagnostic Plot: {filename}\nIssue: {issue}')
        ax1.legend()
        ax1.grid(True, alpha=0.3)
        
        # Plot 2: ‡∏ã‡∏π‡∏°‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à
        # ‡∏´‡∏≤‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ peak ‡∏´‡∏£‡∏∑‡∏≠ variation ‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
        current_variation = np.abs(np.gradient(current))
        high_variation_indices = np.where(current_variation > np.percentile(current_variation, 80))[0]
        
        if len(high_variation_indices) > 0:
            start_idx = max(0, high_variation_indices.min() - 50)
            end_idx = min(len(voltage), high_variation_indices.max() + 50)
            
            ax2.plot(voltage[start_idx:end_idx], current[start_idx:end_idx], 'b-', linewidth=1.5, label='CV Data (Zoomed)')
            
            # ‡πÅ‡∏™‡∏î‡∏á baseline ‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ã‡∏π‡∏°
            if baseline_results.get('v4', {}).get('success'):
                baseline_forward = baseline_results['v4'].get('baseline_forward')
                baseline_reverse = baseline_results['v4'].get('baseline_reverse')
                
                if baseline_forward is not None:
                    n_forward = len(baseline_forward)
                    if start_idx < n_forward and end_idx > start_idx:
                        zoom_forward_start = max(0, start_idx)
                        zoom_forward_end = min(n_forward, end_idx)
                        if zoom_forward_end > zoom_forward_start:
                            voltage_forward_zoom = voltage[zoom_forward_start:zoom_forward_end]
                            baseline_forward_zoom = baseline_forward[zoom_forward_start:zoom_forward_end]
                            ax2.plot(voltage_forward_zoom, baseline_forward_zoom, 'r--', linewidth=2, label='Forward Baseline')
                
                if baseline_reverse is not None:
                    n_reverse = len(baseline_reverse)
                    reverse_start_idx = len(baseline_forward) if baseline_forward is not None else 0
                    if start_idx < reverse_start_idx + n_reverse and end_idx > reverse_start_idx:
                        zoom_reverse_start = max(0, start_idx - reverse_start_idx)
                        zoom_reverse_end = min(n_reverse, end_idx - reverse_start_idx)
                        if zoom_reverse_end > zoom_reverse_start:
                            voltage_reverse_zoom = voltage[reverse_start_idx + zoom_reverse_start:reverse_start_idx + zoom_reverse_end]
                            baseline_reverse_zoom = baseline_reverse[zoom_reverse_start:zoom_reverse_end]
                            ax2.plot(voltage_reverse_zoom, baseline_reverse_zoom, 'g--', linewidth=2, label='Reverse Baseline')
            
            ax2.set_xlabel('Voltage (V)')
            ax2.set_ylabel('Current (¬µA)')
            ax2.set_title('Zoomed View - High Variation Region')
            ax2.legend()
            ax2.grid(True, alpha=0.3)
        else:
            ax2.text(0.5, 0.5, 'No significant variation found', 
                    transform=ax2.transAxes, ha='center', va='center', fontsize=12)
            ax2.set_title('Zoomed View - No Significant Variation')
        
        plt.tight_layout()
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏£‡∏≤‡∏ü
        plot_filename = f"diagnostic_{filename.replace('.csv', '')}.png"
        plt.savefig(plot_filename, dpi=150, bbox_inches='tight')
        print(f"üìä Diagnostic plot saved: {plot_filename}")
        
        plt.show()
    
    def analyze_file(self, file_info):
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå"""
        filename = file_info['file']
        issue = file_info['issue']
        expected = file_info['expected']
        
        print(f"\n{'='*80}")
        print(f"üîç ANALYZING: {filename}")
        print(f"üö® Known Issue: {issue}")
        print(f"üí° Expected: {expected}")
        print(f"{'='*80}")
        
        # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        filepath = self.base_path / filename
        voltage, current = self.load_csv_data(filepath)
        
        if voltage is None or current is None:
            print(f"‚ùå Skipping {filename} - failed to load data")
            return
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå baseline
        baseline_results = self.analyze_baseline_detection(voltage, current, filename)
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå peak
        peak_results = self.analyze_peak_detection(voltage, current, filename)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢
        self.create_diagnostic_plot(voltage, current, baseline_results, peak_results, filename, issue)
        
        # ‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        result = {
            'filename': filename,
            'issue': issue,
            'expected': expected,
            'data_info': {
                'voltage_range': (float(voltage.min()), float(voltage.max())),
                'current_range': (float(current.min()), float(current.max())),
                'data_points': len(voltage)
            },
            'baseline_results': baseline_results,
            'peak_results': peak_results,
            'timestamp': time.strftime('%Y-%m-%d %H:%M:%S')
        }
        
        self.results.append(result)
        
        return result
    
    def run_analysis(self):
        """‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        print("üöÄ Starting Problem File Analysis")
        print(f"üìÅ Base path: {self.base_path}")
        print(f"üìù Analyzing {len(self.problem_files)} problematic files")
        
        for i, file_info in enumerate(self.problem_files, 1):
            print(f"\nüìä Progress: {i}/{len(self.problem_files)}")
            try:
                self.analyze_file(file_info)
            except Exception as e:
                print(f"‚ùå Error analyzing {file_info['file']}: {e}")
                continue
        
        # ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
        self.generate_summary_report()
    
    def generate_summary_report(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏£‡∏∏‡∏õ"""
        print(f"\n{'='*80}")
        print("üìã ANALYSIS SUMMARY REPORT")
        print(f"{'='*80}")
        
        baseline_success = 0
        peak_success = 0
        
        for result in self.results:
            filename = result['filename']
            issue = result['issue']
            
            print(f"\nüìÑ {filename}")
            print(f"   üö® Issue: {issue}")
            
            # Baseline results
            if result['baseline_results'].get('v4', {}).get('success'):
                baseline_success += 1
                baseline_info = result['baseline_results']['v4']
                print(f"   ‚úÖ Baseline: SUCCESS (forward:{baseline_info['forward_len']}, reverse:{baseline_info['reverse_len']})")
            else:
                print(f"   ‚ùå Baseline: FAILED")
            
            # Peak results
            peak_found = False
            for method in ['prominence', 'enhanced']:
                if result['peak_results'].get(method, {}).get('success'):
                    peak_info = result['peak_results'][method]
                    print(f"   ‚úÖ Peaks ({method}): {peak_info['total_peaks']} total (OX:{peak_info['ox_peaks']}, RED:{peak_info['red_peaks']})")
                    peak_found = True
                    break
            
            if peak_found:
                peak_success += 1
            else:
                print(f"   ‚ùå Peaks: NO METHOD SUCCESSFUL")
        
        print(f"\nüìä Overall Statistics:")
        print(f"   Files analyzed: {len(self.results)}")
        print(f"   Baseline detection success: {baseline_success}/{len(self.results)} ({baseline_success/len(self.results)*100:.1f}%)")
        print(f"   Peak detection success: {peak_success}/{len(self.results)} ({peak_success/len(self.results)*100:.1f}%)")
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô JSON
        report_filename = f"problem_files_analysis_report_{time.strftime('%Y%m%d_%H%M%S')}.json"
        with open(report_filename, 'w', encoding='utf-8') as f:
            json.dump(self.results, f, indent=2, ensure_ascii=False)
        
        print(f"\nüíæ Full report saved: {report_filename}")

def main():
    """Main function"""
    analyzer = ProblemFileAnalyzer()
    analyzer.run_analysis()

if __name__ == "__main__":
    main()
