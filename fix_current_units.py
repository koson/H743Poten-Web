#!/usr/bin/env python3
"""
‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Å‡∏£‡∏∞‡πÅ‡∏™‡∏Ç‡∏≠‡∏á STM32 ‡πÉ‡∏ô Database
‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å A ‡πÄ‡∏õ‡πá‡∏ô ¬µA ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö PalmSens
"""

import sqlite3
import json
import os
from datetime import datetime

class CurrentUnitFixer:
    def __init__(self):
        self.db_path = 'data_logs/parameter_log.db'
        self.backup_path = f'data_logs/parameter_log_backup_{datetime.now().strftime("%Y%m%d_%H%M%S")}.db'
    
    def backup_database(self):
        """‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"""
        if os.path.exists(self.db_path):
            import shutil
            shutil.copy2(self.db_path, self.backup_path)
            print(f"‚úÖ ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô: {self.backup_path}")
            return True
        return False
    
    def analyze_measurements(self):
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô database"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        print("üîç ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Database...")
        print("="*60)
        
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• STM32
        cursor.execute("""
            SELECT id, sample_id, raw_data_json 
            FROM measurements 
            WHERE instrument_type = 'stm32' 
            ORDER BY id DESC 
            LIMIT 5
        """)
        stm32_data = cursor.fetchall()
        
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• PalmSens
        cursor.execute("""
            SELECT id, sample_id, raw_data_json 
            FROM measurements 
            WHERE instrument_type = 'palmsens' 
            ORDER BY id DESC 
            LIMIT 5
        """)
        palmsens_data = cursor.fetchall()
        
        print("üî¥ STM32 Measurements (‡∏´‡∏ô‡πà‡∏ß‡∏¢ A ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô ¬µA):")
        for row in stm32_data:
            data = json.loads(row[2])
            cv_data = data['cv_data']
            current_sample = [point[1] for point in cv_data[:5]]
            print(f"  ID {row[0]:3d}: {min(current_sample):.2e} to {max(current_sample):.2e} A")
        
        print("\nüîµ PalmSens Measurements (‡∏´‡∏ô‡πà‡∏ß‡∏¢ ¬µA ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß):")
        for row in palmsens_data:
            data = json.loads(row[2])
            cv_data = data['cv_data']
            current_sample = [point[1] for point in cv_data[:5]]
            print(f"  ID {row[0]:3d}: {min(current_sample):.2e} to {max(current_sample):.2e} ¬µA")
        
        conn.close()
        return len(stm32_data)
    
    def fix_stm32_units(self, dry_run=True):
        """‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Å‡∏£‡∏∞‡πÅ‡∏™‡∏Ç‡∏≠‡∏á STM32"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        print(f"\n{'üîß ‡∏ó‡∏î‡∏™‡∏≠‡∏ö' if dry_run else 'üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç'} ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Å‡∏£‡∏∞‡πÅ‡∏™‡∏Ç‡∏≠‡∏á STM32...")
        print("="*60)
        
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• STM32 ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        cursor.execute("""
            SELECT id, raw_data_json 
            FROM measurements 
            WHERE instrument_type = 'stm32'
        """)
        stm32_measurements = cursor.fetchall()
        
        fixed_count = 0
        for measurement_id, raw_data_json in stm32_measurements:
            try:
                data = json.loads(raw_data_json)
                cv_data = data['cv_data']
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                old_current_range = [point[1] for point in cv_data]
                old_min = min(old_current_range)
                old_max = max(old_current_range)
                
                # ‡πÅ‡∏õ‡∏•‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏à‡∏≤‡∏Å A ‡πÄ‡∏õ‡πá‡∏ô ¬µA (‡∏Ñ‡∏π‡∏ì 1,000,000)
                new_cv_data = []
                for voltage, current in cv_data:
                    new_current = current * 1e6  # A ‚Üí ¬µA
                    new_cv_data.append([voltage, new_current])
                
                data['cv_data'] = new_cv_data
                new_raw_data_json = json.dumps(data)
                
                new_current_range = [point[1] for point in new_cv_data]
                new_min = min(new_current_range)
                new_max = max(new_current_range)
                
                print(f"ID {measurement_id:3d}: {old_min:.2e} A ‚Üí {new_min:.2e} ¬µA")
                print(f"        : {old_max:.2e} A ‚Üí {new_max:.2e} ¬µA")
                
                if not dry_run:
                    # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                    cursor.execute("""
                        UPDATE measurements 
                        SET raw_data_json = ?, 
                            analysis_timestamp = ?
                        WHERE id = ?
                    """, (new_raw_data_json, datetime.now(), measurement_id))
                
                fixed_count += 1
                
            except Exception as e:
                print(f"‚ùå Error processing ID {measurement_id}: {e}")
        
        if not dry_run:
            conn.commit()
            print(f"\n‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: {fixed_count} measurements")
        else:
            print(f"\nüìä ‡∏à‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: {fixed_count} measurements")
        
        conn.close()
        return fixed_count
    
    def verify_fix(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        print("\nüîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç...")
        print("="*60)
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö STM32 vs PalmSens
        cursor.execute("""
            SELECT id, instrument_type, sample_id, raw_data_json 
            FROM measurements 
            WHERE id IN (75, 90)
            ORDER BY id
        """)
        
        for row in cursor.fetchall():
            data = json.loads(row[3])
            cv_data = data['cv_data']
            current_values = [point[1] for point in cv_data]
            min_current = min(current_values)
            max_current = max(current_values)
            
            print(f"{row[1]:8s} ID {row[0]:3d}: {min_current:.2e} to {max_current:.2e} ¬µA")
        
        conn.close()

def main():
    print("üöÄ ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Å‡∏£‡∏∞‡πÅ‡∏™‡∏Ç‡∏≠‡∏á STM32")
    print("="*60)
    
    fixer = CurrentUnitFixer()
    
    # 1. ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    if not fixer.backup_database():
        print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ")
        return
    
    # 2. ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    count = fixer.analyze_measurements()
    if count == 0:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• STM32 ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
        return
    
    # 3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
    fixer.fix_stm32_units(dry_run=True)
    
    # 4. ‡∏Ç‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    response = input("\n‚ùì ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? (y/n): ").strip().lower()
    
    if response == 'y':
        # 5. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏à‡∏£‡∏¥‡∏á
        fixer.fix_stm32_units(dry_run=False)
        
        # 6. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•
        fixer.verify_fix()
        
        print("\nüéâ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô! ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Å‡∏£‡∏∞‡πÅ‡∏™‡∏Ç‡∏≠‡∏á STM32 ‡πÅ‡∏•‡∏∞ PalmSens ‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß")
        print("üí° ‡∏•‡∏≠‡∏á‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö calibration ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
    else:
        print("‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç")

if __name__ == "__main__":
    main()