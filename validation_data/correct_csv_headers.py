#!/usr/bin/env python3
"""
CSV Header Correction Tool
‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç header ‡∏à‡∏≤‡∏Å uA ‡πÄ‡∏õ‡πá‡∏ô A ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå STM32H743 ‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå magnitude ‡πÉ‡∏´‡∏°‡πà
"""

import pandas as pd
import numpy as np
from pathlib import Path
import shutil
import os
from datetime import datetime

class CSVHeaderCorrector:
    """‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç header ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå CSV ‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå magnitude"""
    
    def __init__(self):
        self.base_path = Path("validation_data")
        self.stm32_path = self.base_path / "reference_cv_data" / "stm32h743"
        self.backup_path = self.base_path / "backup" / f"stm32h743_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        
    def analyze_magnitude_before_correction(self):
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå magnitude ‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"""
        print("üîç ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå magnitude ‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç header")
        print("=" * 60)
        
        # ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å STM32H743
        stm32_files = list(self.stm32_path.glob("*.csv"))[:5]  # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á 5 ‡πÑ‡∏ü‡∏•‡πå
        
        print(f"üìä ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏ü‡∏•‡πå STM32H743 ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:")
        
        stm32_magnitudes = []
        for file_path in stm32_files:
            try:
                # ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏î‡∏¢‡∏Ç‡πâ‡∏≤‡∏° header ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÅ‡∏£‡∏Å
                df = pd.read_csv(file_path, skiprows=1)
                if 'uA' in df.columns:
                    current_data = df['uA'].values
                    magnitude_range = [np.min(current_data), np.max(current_data)]
                    stm32_magnitudes.extend([abs(magnitude_range[0]), abs(magnitude_range[1])])
                    
                    print(f"   {file_path.name}:")
                    print(f"     Current range: {magnitude_range[0]:.2e} to {magnitude_range[1]:.2e} (labeled as uA)")
                    print(f"     Magnitude order: ~{np.log10(max(abs(magnitude_range[0]), abs(magnitude_range[1]))):.1f}")
                    
            except Exception as e:
                print(f"   ‚ùå Error reading {file_path.name}: {e}")
        
        # ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö PalmSens
        palmsens_path = self.base_path / "reference_cv_data" / "palmsens"
        palmsens_files = list(palmsens_path.glob("*.csv"))[:3]
        
        print(f"\nüìä ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö PalmSens:")
        palmsens_magnitudes = []
        
        for file_path in palmsens_files:
            try:
                df = pd.read_csv(file_path, skiprows=1)
                if 'uA' in df.columns:
                    current_data = df['uA'].values
                    magnitude_range = [np.min(current_data), np.max(current_data)]
                    palmsens_magnitudes.extend([abs(magnitude_range[0]), abs(magnitude_range[1])])
                    
                    print(f"   {file_path.name}:")
                    print(f"     Current range: {magnitude_range[0]:.2e} to {magnitude_range[1]:.2e} uA")
                    print(f"     Magnitude order: ~{np.log10(max(abs(magnitude_range[0]), abs(magnitude_range[1]))):.1f}")
                    
            except Exception as e:
                print(f"   ‚ùå Error reading {file_path.name}: {e}")
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô
        if stm32_magnitudes and palmsens_magnitudes:
            avg_stm32 = np.mean(stm32_magnitudes)
            avg_palmsens = np.mean(palmsens_magnitudes)
            
            print(f"\nüìà ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö magnitude:")
            print(f"   STM32H743 average magnitude: {avg_stm32:.2e} (labeled as uA)")
            print(f"   PalmSens average magnitude: {avg_palmsens:.2e} uA")
            print(f"   Ratio (PalmSens/STM32): {avg_palmsens/avg_stm32:.2e}")
            
            # ‡∏ñ‡πâ‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏à‡∏≤‡∏Å uA ‡πÄ‡∏õ‡πá‡∏ô A ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö STM32
            stm32_as_ampere = avg_stm32  # ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô A
            stm32_as_microampere = avg_stm32 * 1e6  # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô uA
            
            print(f"\nüîÑ ‡∏ñ‡πâ‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏ô‡πà‡∏ß‡∏¢ STM32H743 ‡∏à‡∏≤‡∏Å uA ‡πÄ‡∏õ‡πá‡∏ô A:")
            print(f"   STM32H743 ‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢ A: {stm32_as_ampere:.2e} A")
            print(f"   STM32H743 ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô uA: {stm32_as_microampere:.2e} uA")
            print(f"   ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡∏°‡πà (PalmSens/STM32): {avg_palmsens/stm32_as_microampere:.2f}")
            
            if 0.1 <= avg_palmsens/stm32_as_microampere <= 10:
                print(f"   ‚úÖ ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏°‡∏ú‡∏•! STM32H743 ‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢ A")
            else:
                print(f"   ‚ö†Ô∏è  ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏°‡∏ú‡∏•")
    
    def backup_files(self):
        """‡∏™‡∏≥‡∏£‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"""
        print(f"\nüíæ ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏õ‡∏ó‡∏µ‡πà: {self.backup_path}")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå backup
        self.backup_path.mkdir(parents=True, exist_ok=True)
        
        # Copy ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        stm32_files = list(self.stm32_path.glob("*.csv"))
        for file_path in stm32_files:
            backup_file = self.backup_path / file_path.name
            shutil.copy2(file_path, backup_file)
        
        print(f"   ‚úÖ ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡πâ‡∏ß {len(stm32_files)} ‡πÑ‡∏ü‡∏•‡πå")
        return len(stm32_files)
    
    def correct_headers(self, dry_run=True):
        """‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç header ‡∏à‡∏≤‡∏Å uA ‡πÄ‡∏õ‡πá‡∏ô A"""
        print(f"\nüîß {'[DRY RUN] ' if dry_run else ''}‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç header ‡πÑ‡∏ü‡∏•‡πå STM32H743")
        print("=" * 60)
        
        stm32_files = list(self.stm32_path.glob("*.csv"))
        corrected_count = 0
        error_count = 0
        
        for i, file_path in enumerate(stm32_files):
            try:
                # ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå
                with open(file_path, 'r') as f:
                    lines = f.readlines()
                
                if len(lines) >= 2:
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö header ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà 2
                    header_line = lines[1].strip()
                    
                    if header_line == "V,uA":
                        # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç header
                        lines[1] = "V,A\n"
                        corrected_count += 1
                        
                        if not dry_run:
                            # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà
                            with open(file_path, 'w') as f:
                                f.writelines(lines)
                        
                        if i < 5:  # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á 5 ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏£‡∏Å
                            print(f"   ‚úÖ {file_path.name}: V,uA ‚Üí V,A")
                    else:
                        if i < 5:
                            print(f"   ‚è≠Ô∏è  {file_path.name}: header = '{header_line}' (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ)")
                else:
                    print(f"   ‚ùå {file_path.name}: ‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠")
                    error_count += 1
                    
            except Exception as e:
                print(f"   ‚ùå {file_path.name}: Error - {e}")
                error_count += 1
        
        print(f"\nüìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:")
        print(f"   ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß: {corrected_count} ‡πÑ‡∏ü‡∏•‡πå")
        print(f"   ‚è≠Ô∏è  ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ: {len(stm32_files) - corrected_count - error_count} ‡πÑ‡∏ü‡∏•‡πå")
        print(f"   ‚ùå Error: {error_count} ‡πÑ‡∏ü‡∏•‡πå")
        
        return corrected_count, error_count
    
    def analyze_magnitude_after_correction(self):
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå magnitude ‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"""
        print(f"\nüîç ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå magnitude ‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç header")
        print("=" * 60)
        
        # ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å STM32H743
        stm32_files = list(self.stm32_path.glob("*.csv"))[:5]
        
        print(f"üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• STM32H743 ‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç (‡∏´‡∏ô‡πà‡∏ß‡∏¢ A):")
        stm32_magnitudes = []
        
        for file_path in stm32_files:
            try:
                df = pd.read_csv(file_path, skiprows=1)
                if 'A' in df.columns:
                    current_data = df['A'].values
                    magnitude_range = [np.min(current_data), np.max(current_data)]
                    stm32_magnitudes.extend([abs(magnitude_range[0]), abs(magnitude_range[1])])
                    
                    # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô ¬µA ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
                    magnitude_range_ua = [x * 1e6 for x in magnitude_range]
                    
                    print(f"   {file_path.name}:")
                    print(f"     Current (A): {magnitude_range[0]:.2e} to {magnitude_range[1]:.2e}")
                    print(f"     Current (¬µA): {magnitude_range_ua[0]:.2f} to {magnitude_range_ua[1]:.2f}")
                    
            except Exception as e:
                print(f"   ‚ùå Error reading {file_path.name}: {e}")
        
        # ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö PalmSens
        palmsens_path = self.base_path / "reference_cv_data" / "palmsens"
        palmsens_files = list(palmsens_path.glob("*.csv"))[:3]
        
        print(f"\nüìä ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö PalmSens:")
        palmsens_magnitudes = []
        
        for file_path in palmsens_files:
            try:
                df = pd.read_csv(file_path, skiprows=1)
                if 'uA' in df.columns:
                    current_data = df['uA'].values
                    magnitude_range = [np.min(current_data), np.max(current_data)]
                    palmsens_magnitudes.extend([abs(magnitude_range[0]), abs(magnitude_range[1])])
                    
                    print(f"   {file_path.name}:")
                    print(f"     Current (¬µA): {magnitude_range[0]:.2f} to {magnitude_range[1]:.2f}")
                    
            except Exception as e:
                print(f"   ‚ùå Error reading {file_path.name}: {e}")
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡∏°‡πà
        if stm32_magnitudes and palmsens_magnitudes:
            avg_stm32_ampere = np.mean(stm32_magnitudes)
            avg_stm32_microampere = avg_stm32_ampere * 1e6
            avg_palmsens = np.mean(palmsens_magnitudes)
            
            print(f"\nüìà ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö magnitude ‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:")
            print(f"   STM32H743: {avg_stm32_ampere:.2e} A = {avg_stm32_microampere:.2f} ¬µA")
            print(f"   PalmSens: {avg_palmsens:.2f} ¬µA")
            print(f"   ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô (PalmSens/STM32): {avg_palmsens/avg_stm32_microampere:.2f}")
            
            if 0.1 <= avg_palmsens/avg_stm32_microampere <= 10:
                print(f"   ‚úÖ ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏°‡∏ú‡∏•! ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏Å‡∏±‡∏ô")
                print(f"   üéØ STM32H743 ‡πÅ‡∏•‡∏∞ PalmSens ‡πÉ‡∏´‡πâ‡∏ú‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÑ‡∏î‡πâ")
            else:
                print(f"   ‚ö†Ô∏è  ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÅ‡∏õ‡∏•‡∏Å ‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°")

def main():
    corrector = CSVHeaderCorrector()
    
    print("üîß CSV Header Correction Tool")
    print("‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç header ‡πÑ‡∏ü‡∏•‡πå STM32H743 ‡∏à‡∏≤‡∏Å uA ‡πÄ‡∏õ‡πá‡∏ô A")
    print("=" * 70)
    
    # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
    corrector.analyze_magnitude_before_correction()
    
    # ‡∏ó‡∏≥ Dry Run ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    print(f"\nüß™ ‡∏ó‡∏≥ Dry Run ‡∏Å‡πà‡∏≠‡∏ô...")
    corrected, errors = corrector.correct_headers(dry_run=True)
    
    if corrected > 0:
        print(f"\n‚ùì ‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç {corrected} ‡πÑ‡∏ü‡∏•‡πå")
        print(f"   ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? (y/n): ", end="")
        
        # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö interactive
        import sys
        if sys.stdin.isatty():
            choice = input().strip().lower()
        else:
            choice = "y"  # Default ‡πÉ‡∏´‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà interactive mode
        
        if choice in ['y', 'yes', '']:
            print(f"\nüíæ ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏à‡∏£‡∏¥‡∏á...")
            backup_count = corrector.backup_files()
            
            if backup_count > 0:
                corrected, errors = corrector.correct_headers(dry_run=False)
                if corrected > 0:
                    corrector.analyze_magnitude_after_correction()
                    
                    # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
                    print(f"\nüìù ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ:")
                    print(f"   1. ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç CSV headers ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß")
                    print(f"   2. üìù ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ DATA_SPLITTING_STRATEGY.md")
                    print(f"   3. üîÑ ‡∏£‡∏±‡∏ô validation ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô magnitude ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        else:
            print(f"\n‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç")
    else:
        print(f"\n‚úÖ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç")

if __name__ == "__main__":
    main()
