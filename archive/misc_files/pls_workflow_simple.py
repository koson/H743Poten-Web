#!/usr/bin/env python3
"""
PLS Workflow Simple - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡πÅ‡∏¢‡∏Å concentration/scan rate
"""

import pandas as pd
import numpy as np
from pathlib import Path
import re

def extract_metadata_from_filename(filename):
    """‡πÅ‡∏¢‡∏Å concentration ‡πÅ‡∏•‡∏∞ scan rate ‡∏à‡∏≤‡∏Å filename"""
    filename_lower = filename.lower()
    
    # Pattern ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö concentration
    concentration = None
    
    # Palmsens format: Palmsens_0.5mM_...
    conc_match = re.search(r'palmsens[_\s]*(\d+\.?\d*)\s*mm', filename_lower)
    if conc_match:
        concentration = float(conc_match.group(1))
    
    # STM32 format: Pipot_Ferro_0_5mM_... ‡∏´‡∏£‡∏∑‡∏≠ Pipot_Ferro_1_0mM_...
    if concentration is None:
        conc_match = re.search(r'pipot[_\s]*ferro[_\s]*(\d+)[_\s]*(\d+)[_\s]*mm', filename_lower)
        if conc_match:
            major = int(conc_match.group(1))
            minor = int(conc_match.group(2))
            concentration = major + minor / 10.0
    
    # Pattern ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö scan rate
    scan_rate = None
    scan_match = re.search(r'(\d+\.?\d*)\s*mv[\/\s]*p?s', filename_lower)
    if scan_match:
        scan_rate = float(scan_match.group(1))
    
    return concentration, scan_rate

def load_palmsens_csv(filepath):
    """‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå CSV ‡∏Ç‡∏≠‡∏á Palmsens"""
    try:
        # ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏î‡∏¢‡∏Ç‡πâ‡∏≤‡∏° 2 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÅ‡∏£‡∏Å (‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå + header)
        data = pd.read_csv(filepath, skiprows=2, names=['voltage', 'current'])
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        if len(data) == 0:
            print(f"‚ùå ‡πÑ‡∏ü‡∏•‡πå‡∏ß‡πà‡∏≤‡∏á: {filepath}")
            return None
            
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
        if not (pd.api.types.is_numeric_dtype(data['voltage']) and 
                pd.api.types.is_numeric_dtype(data['current'])):
            print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç: {filepath}")
            return None
            
        return data
    except Exception as e:
        print(f"‚ùå Error loading {filepath}: {e}")
        return None

def scan_palmsens_data():
    """‡∏™‡πÅ‡∏Å‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Palmsens"""
    palmsens_dir = Path("Test_data/Palmsens")
    
    if not palmsens_dir.exists():
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå Test_data/Palmsens")
        return
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    concentrations = set()
    scan_rates = set()
    data_summary = []
    
    print("üîç ‡∏™‡πÅ‡∏Å‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Palmsens...")
    
    # ‡∏™‡πÅ‡∏Å‡∏ô‡∏ó‡∏∏‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡πâ‡∏ô
    for conc_folder in palmsens_dir.iterdir():
        if not conc_folder.is_dir():
            continue
            
        print(f"üìÇ {conc_folder.name}")
        
        # ‡∏™‡πÅ‡∏Å‡∏ô‡πÑ‡∏ü‡∏•‡πå CSV ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
        csv_files = list(conc_folder.glob("*.csv"))
        
        for csv_file in csv_files[:3]:  # ‡∏î‡∏π‡πÅ‡∏Ñ‡πà 3 ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏£‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡πÄ‡∏ß‡∏•‡∏≤
            concentration, scan_rate = extract_metadata_from_filename(csv_file.name)
            
            if concentration is not None and scan_rate is not None:
                concentrations.add(concentration)
                scan_rates.add(scan_rate)
                
                # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• CV
                cv_data = load_palmsens_csv(csv_file)
                if cv_data is not None:
                    data_summary.append({
                        'filename': csv_file.name,
                        'concentration': concentration,
                        'scan_rate': scan_rate,
                        'voltage_range': f"{cv_data['voltage'].min():.2f} to {cv_data['voltage'].max():.2f}",
                        'current_range': f"{cv_data['current'].min():.2f} to {cv_data['current'].max():.2f}",
                        'data_points': len(cv_data)
                    })
                    
                    print(f"   ‚úÖ {csv_file.name}: {concentration}mM @ {scan_rate}mV/s")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•
    print(f"\nüìä ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Palmsens:")
    print(f"   üß™ Concentrations: {sorted(concentrations)} mM")
    print(f"   ‚ö° Scan rates: {sorted(scan_rates)} mV/s")
    print(f"   üìÅ ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ: {len(data_summary)} ‡πÑ‡∏ü‡∏•‡πå")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡πâ‡∏ô vs ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô
    print(f"\nüìã ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:")
    print("Conc\\Scan", end="")
    for sr in sorted(scan_rates):
        print(f"\t{sr}", end="")
    print()
    
    for conc in sorted(concentrations):
        print(f"{conc}", end="")
        for sr in sorted(scan_rates):
            # ‡∏ô‡∏±‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            has_data = any(d['concentration'] == conc and d['scan_rate'] == sr 
                          for d in data_summary)
            print(f"\t{'‚úÖ' if has_data else '‚ùå'}", end="")
        print()
    
    return data_summary, sorted(concentrations), sorted(scan_rates)

if __name__ == "__main__":
    print("üöÄ PLS Workflow Simple - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    print("=" * 50)
    
    data_summary, concentrations, scan_rates = scan_palmsens_data()
    
    print(f"\n‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô!")
    print(f"   ‡∏û‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡πâ‡∏ô: {len(concentrations)} ‡∏£‡∏∞‡∏î‡∏±‡∏ö")
    print(f"   ‡∏û‡∏ö‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô: {len(scan_rates)} ‡∏£‡∏∞‡∏î‡∏±‡∏ö")
    print(f"   ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•: {len(data_summary)} ‡πÑ‡∏ü‡∏•‡πå")
