#!/usr/bin/env python3
"""
Fast Test Enhanced V4 Improved - Web API Compatible
‡∏ó‡∏î‡∏™‡∏≠‡∏ö Enhanced V4 Improved ‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡πá‡∏ß‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏≠‡∏õ
"""

import pandas as pd
import numpy as np
import time
import json

def test_enhanced_v4_fast():
    print("‚ö° Fast Test Enhanced V4 Improved")
    print("=" * 40)
    
    try:
        from enhanced_detector_v4_improved import EnhancedDetectorV4Improved
        
        # ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
        test_file = 'Test_data/Palmsens/Palmsens_0.5mM/Palmsens_0.5mM_CV_100mVpS_E1_scan_01.csv'
        data = pd.read_csv(test_file, skiprows=2, names=['voltage', 'current'])
        
        print(f"‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå: {len(data)} points")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á detector
        start_time = time.time()
        detector = EnhancedDetectorV4Improved(confidence_threshold=25.0)
        print(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á detector: {time.time() - start_time:.3f}s")
        
        # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡πÅ‡∏ö‡∏ö‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏≠‡∏õ)
        cv_data = {
            'voltage': data['voltage'].tolist(),
            'current': data['current'].tolist()
        }
        
        print("üî¨ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå...")
        analysis_start = time.time()
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
        results = detector.analyze_cv_data(cv_data)
        
        analysis_time = time.time() - analysis_start
        print(f"‚úÖ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏™‡∏£‡πá‡∏à: {analysis_time:.3f}s")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
        if results and isinstance(results, dict):
            peaks = results.get('peaks', [])
            print(f"\\nüéØ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:")
            print(f"  Total peaks: {len(peaks)}")
            
            ox_peaks = [p for p in peaks if p.get('type') == 'oxidation']
            red_peaks = [p for p in peaks if p.get('type') == 'reduction']
            
            print(f"  Oxidation peaks: {len(ox_peaks)}")
            print(f"  Reduction peaks: {len(red_peaks)}")
            
            if peaks:
                print(f"\\nüìã Peak details:")
                for i, peak in enumerate(peaks[:3]):  # ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà 3 peaks ‡πÅ‡∏£‡∏Å
                    voltage = peak.get('voltage', 0)
                    current = peak.get('current', 0)
                    peak_type = peak.get('type', 'unknown')
                    confidence = peak.get('confidence', 0)
                    
                    print(f"    Peak {i+1}: {peak_type} @ {voltage:.3f}V, {current:.1f}¬µA (conf: {confidence:.1f}%)")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∑‡πà‡∏ô‡πÜ
            print(f"\\nüîç Additional info:")
            print(f"  Method: {results.get('method', 'unknown')}")
            print(f"  Confidence threshold: {results.get('confidence_threshold', 0)}%")
            print(f"  Processing time: {results.get('processing_time', 0):.3f}s")
            
            return True
        else:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
            return False
            
    except Exception as e:
        print(f"‚ùå Error: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_enhanced_v4_fast()
    if success:
        print("\\nüéâ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
    else:
        print("\\nüí• ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß!")
