#!/usr/bin/env python3
"""
Convert PiPot CSV files from Amperes (A) to microAmps (¬µA)
‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå CSV ‡∏Ç‡∏≠‡∏á PiPot ‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πà‡∏ß‡∏¢ A ‡πÄ‡∏õ‡πá‡∏ô ¬µA ‡πÇ‡∏î‡∏¢‡∏Ñ‡∏π‡∏ì‡∏î‡πâ‡∏ß‡∏¢ 1e6
"""

import os
import glob
import shutil
from pathlib import Path

def convert_pipot_file(file_path):
    """Convert single PiPot file from A to ¬µA"""
    try:
        print(f"Converting: {file_path}")
        
        # ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö
        with open(file_path, 'r', encoding='utf-8') as f:
            lines = f.readlines()
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå PiPot (‡∏°‡∏µ FileName: header ‡πÅ‡∏•‡∏∞ V,A)
        if len(lines) < 2:
            print(f"  ‚ö†Ô∏è  Skipped: File too short")
            return False
            
        if not lines[0].strip().startswith('FileName:'):
            print(f"  ‚ö†Ô∏è  Skipped: Not PiPot format (no FileName header)")
            return False
            
        if lines[1].strip().lower() != 'v,a':
            print(f"  ‚ö†Ô∏è  Skipped: Not A units (header: {lines[1].strip()})")
            return False
        
        # ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏°
        backup_path = file_path + '.backup'
        if not os.path.exists(backup_path):
            shutil.copy2(file_path, backup_path)
            print(f"  üìÅ Backup created: {backup_path}")
        
        # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        converted_lines = []
        converted_lines.append(lines[0])  # FileName line
        converted_lines.append('V,uA\n')  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô header ‡∏à‡∏≤‡∏Å V,A ‡πÄ‡∏õ‡πá‡∏ô V,uA
        
        data_converted = 0
        for i, line in enumerate(lines[2:], start=2):
            line = line.strip()
            if not line:
                converted_lines.append('\n')
                continue
                
            try:
                parts = line.split(',')
                if len(parts) >= 2:
                    voltage = float(parts[0])
                    current_A = float(parts[1])
                    current_uA = current_A * 1e6  # Convert A to ¬µA
                    
                    # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
                    converted_lines.append(f'{voltage},{current_uA}\n')
                    data_converted += 1
                else:
                    converted_lines.append(line + '\n')
                    
            except ValueError as e:
                print(f"  ‚ö†Ô∏è  Line {i}: Could not convert '{line}' - {e}")
                converted_lines.append(line + '\n')
        
        # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà
        with open(file_path, 'w', encoding='utf-8') as f:
            f.writelines(converted_lines)
        
        print(f"  ‚úÖ Converted {data_converted} data points")
        print(f"  üìù Header changed: V,A ‚Üí V,uA")
        return True
        
    except Exception as e:
        print(f"  ‚ùå Error: {e}")
        return False

def main():
    """Convert all PiPot files in Test_data/Stm32"""
    
    print("üîÑ PiPot Unit Converter: A ‚Üí ¬µA")
    print("=" * 50)
    
    # ‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå PiPot ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    pipot_pattern = "Test_data/Stm32/**/*.csv"
    all_csv_files = glob.glob(pipot_pattern, recursive=True)
    
    # ‡∏Å‡∏£‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå backup ‡∏≠‡∏≠‡∏Å (‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏•‡∏á‡∏ó‡πâ‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢ .backup)
    pipot_files = [f for f in all_csv_files if not f.endswith('.backup')]
    
    if not pipot_files:
        print("‚ùå No PiPot files found!")
        return
    
    print(f"üìÅ Found {len(pipot_files)} potential PiPot files (excluding .backup files)")
    if len(all_csv_files) > len(pipot_files):
        print(f"üìÅ Filtered out {len(all_csv_files) - len(pipot_files)} backup files")
    print()
    
    # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
    converted_count = 0
    skipped_count = 0
    error_count = 0
    
    # ‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏µ‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå
    for file_path in pipot_files:
        try:
            result = convert_pipot_file(file_path)
            if result:
                converted_count += 1
            else:
                skipped_count += 1
        except Exception as e:
            print(f"‚ùå Fatal error with {file_path}: {e}")
            error_count += 1
        print()
    
    # ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•
    print("=" * 50)
    print("üìä CONVERSION SUMMARY")
    print(f"‚úÖ Converted: {converted_count} files")
    print(f"‚ö†Ô∏è  Skipped: {skipped_count} files")
    print(f"‚ùå Errors: {error_count} files")
    print(f"üìÅ Total processed: {len(pipot_files)} files")
    
    if converted_count > 0:
        print("\nüéâ SUCCESS! PiPot files converted from A to ¬µA")
        print("üíæ Original files backed up with .backup extension")
        print("‚ö†Ô∏è  Remember to update any hardcoded unit conversions in code!")
    
    print("\nüîç Next steps:")
    print("1. Test a few converted files to ensure they look correct")
    print("2. Update backend code to treat PiPot files as ¬µA units")
    print("3. Remove the 1e6 multiplication for PiPot files in peak_detection.py")

if __name__ == "__main__":
    main()