#!/usr/bin/env python3
"""
р╣Бр╕Бр╣Йр╣Др╕Вр╕лр╕Щр╣Ир╕зр╕вр╕Бр╕гр╕░р╣Бр╕кр╕Вр╕нр╕З STM32 р╣Гр╕Щ Database (Auto mode)
"""

import sqlite3
import json
import os
from datetime import datetime

def fix_current_units():
    """р╣Бр╕Бр╣Йр╣Др╕Вр╕лр╕Щр╣Ир╕зр╕вр╕Бр╕гр╕░р╣Бр╕кр╕Вр╕нр╕З STM32 р╣Вр╕Фр╕вр╕нр╕▒р╕Хр╣Вр╕Щр╕бр╕▒р╕Хр╕┤"""
    db_path = 'data_logs/parameter_log.db'
    backup_path = f'data_logs/parameter_log_backup_{datetime.now().strftime("%Y%m%d_%H%M%S")}.db'
    
    # р╕кр╕│р╕гр╕нр╕Зр╕Рр╕▓р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕е
    if os.path.exists(db_path):
        import shutil
        shutil.copy2(db_path, backup_path)
        print(f"тЬЕ р╕кр╕│р╕гр╕нр╕Зр╕Рр╕▓р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Ар╕Ыр╣Зр╕Щ: {backup_path}")
    
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    print("ЁЯФз р╕Бр╕│р╕ер╕▒р╕Зр╣Бр╕Бр╣Йр╣Др╕Вр╕лр╕Щр╣Ир╕зр╕вр╕Бр╕гр╕░р╣Бр╕кр╕Вр╕нр╕З STM32...")
    print("="*60)
    
    # р╕Фр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕е STM32 р╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф
    cursor.execute("""
        SELECT id, raw_data_json 
        FROM measurements 
        WHERE instrument_type = 'stm32'
    """)
    stm32_measurements = cursor.fetchall()
    
    fixed_count = 0
    for measurement_id, raw_data_json in stm32_measurements:
        try:
            data = json.loads(raw_data_json)
            
            if 'cv_data' not in data:
                print(f"тЪая╕П ID {measurement_id}: р╣Др╕бр╣Ир╕бр╕╡ cv_data, р╕Вр╣Йр╕▓р╕б")
                continue
                
            cv_data = data['cv_data']
            
            # р╣Бр╕кр╕Фр╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Бр╣Ир╕нр╕Щр╣Бр╕Бр╣Йр╣Др╕В
            old_current_range = [point[1] for point in cv_data]
            old_min = min(old_current_range)
            old_max = max(old_current_range)
            
            # р╣Бр╕Ыр╕ер╕Зр╕лр╕Щр╣Ир╕зр╕вр╕Ир╕▓р╕Б A р╣Ар╕Ыр╣Зр╕Щ ┬╡A (р╕Др╕╣р╕У 1,000,000)
            new_cv_data = []
            for voltage, current in cv_data:
                new_current = current * 1e6  # A тЖТ ┬╡A
                new_cv_data.append([voltage, new_current])
            
            data['cv_data'] = new_cv_data
            new_raw_data_json = json.dumps(data)
            
            new_current_range = [point[1] for point in new_cv_data]
            new_min = min(new_current_range)
            new_max = max(new_current_range)
            
            print(f"ID {measurement_id:3d}: {old_min:.2e} A тЖТ {new_min:.2e} ┬╡A")
            print(f"        : {old_max:.2e} A тЖТ {new_max:.2e} ┬╡A")
            
            # р╕нр╕▒р╕Ыр╣Ар╕Фр╕Хр╕Рр╕▓р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕е
            cursor.execute("""
                UPDATE measurements 
                SET raw_data_json = ?, 
                    analysis_timestamp = ?
                WHERE id = ?
            """, (new_raw_data_json, datetime.now(), measurement_id))
            
            fixed_count += 1
            
        except Exception as e:
            print(f"тЭМ Error processing ID {measurement_id}: {e}")
    
    conn.commit()
    print(f"\nтЬЕ р╣Бр╕Бр╣Йр╣Др╕Вр╣Ар╕кр╕гр╣Зр╕Ир╕кр╕┤р╣Йр╕Щ: {fixed_count} measurements")
    
    # р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Ьр╕ер╕Бр╕▓р╕гр╣Бр╕Бр╣Йр╣Др╕В
    print("\nЁЯФН р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Ьр╕ер╕Бр╕▓р╕гр╣Бр╕Бр╣Йр╣Др╕В...")
    print("="*60)
    
    cursor.execute("""
        SELECT id, instrument_type, sample_id, raw_data_json 
        FROM measurements 
        WHERE id IN (75, 90)
        ORDER BY id
    """)
    
    for row in cursor.fetchall():
        data = json.loads(row[3])
        cv_data = data['cv_data']
        current_values = [point[1] for point in cv_data]
        min_current = min(current_values)
        max_current = max(current_values)
        
        print(f"{row[1]:8s} ID {row[0]:3d}: {min_current:.2e} to {max_current:.2e} ┬╡A")
    
    conn.close()
    
    print("\nЁЯОЙ р╣Бр╕Бр╣Йр╣Др╕Вр╣Ар╕кр╕гр╣Зр╕Ир╕кр╕┤р╣Йр╕Щ! р╕Хр╕нр╕Щр╕Щр╕╡р╣Йр╕лр╕Щр╣Ир╕зр╕вр╕Бр╕гр╕░р╣Бр╕кр╕Вр╕нр╕З STM32 р╣Бр╕ер╕░ PalmSens р╕кр╕нр╕Фр╕Др╕ер╣Йр╕нр╕Зр╕Бр╕▒р╕Щр╣Бр╕ер╣Йр╕з")
    return fixed_count

if __name__ == "__main__":
    print("ЁЯЪА р╣Бр╕Бр╣Йр╣Др╕Вр╕лр╕Щр╣Ир╕зр╕вр╕Бр╕гр╕░р╣Бр╕кр╕Вр╕нр╕З STM32 (Auto Mode)")
    print("="*60)
    
    fixed_count = fix_current_units()
    
    if fixed_count > 0:
        print("\nЁЯТб р╕Вр╕▒р╣Йр╕Щр╕Хр╕нр╕Щр╕Хр╣Ир╕нр╣Др╕Ы:")
        print("   1. р╕Чр╕Фр╕кр╕нр╕Ър╕Бр╕▓р╕гр╣Ар╕Ыр╕гр╕╡р╕вр╕Ър╣Ар╕Чр╕╡р╕вр╕Ъ calibration р╣Гр╕лр╕бр╣И")
        print("   2. р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Ьр╕ер╕ер╕▒р╕Юр╕Шр╣Мр╕зр╣Ир╕▓р╕кр╕бр╣Ар╕лр╕Хр╕╕р╕кр╕бр╕Ьр╕е")
        print("   3. р╕лр╕▓р╕Бр╕Ьр╕ер╕ер╕▒р╕Юр╕Шр╣Мр╕Фр╕╡ р╕кр╕▓р╕бр╕▓р╕гр╕Цр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щр╕Хр╣Ир╕нр╣Др╕Фр╣Й")
    else:
        print("тЭМ р╣Др╕бр╣Ир╕бр╕╡р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Чр╕╡р╣Ир╕Хр╣Йр╕нр╕Зр╣Бр╕Бр╣Йр╣Др╕В")